从广义上来说,有两种实现会话的方法:
	把所有东西都存在 cookie 里,
	或者只在 cookie 里 存一个唯一标识,其他东西都存在服务器上。

推荐使用第二种方法，只有在你知道自己只存少量信息,
并 且不介意用户能够访问这些信息,而它也不会随着时间的增长而失控时,你才可以用这 种方式。
如果你想采取这种方式,请查阅中间件 cookie-session
(https://www.npmjs.org/ package/cookie-session)。


内存存储：
	把会话信息存在服务器上，但也有个巨大的缺陷:重启服务 器(你在本书中会做很多次)后会话信息就消失了。
	更糟的是,如果你扩展了多台服务器 (参见第 12 章),那么每次请求可能是由不同的服务器处理的,
	所以会话数据有时在那里, 有时不在。这明显是不可接受的用户体验。
	然而出于开发和测试的需要,有它就足够了。 我们会在第 13 章介绍如何永久地存储会话信息。

即显消息
	在开发过程中也表 现得很好,因为它们是一种简易的反馈方式,
	即便你之后会用其他技术取代它们。在搭建 网站时,我首先要做的事情之一就是添加对即显消息的支持,
	并且本书后续会一直使用这 一技术。

会话：
	会话实际上只是更方便的状态维护方法。要实现会话,必须在客户端存些东西,
	否则服 务器无法从一个请求到下一个请求中识别客户端。
	通常的做法是用一个包含唯一标识的 cookie,然后服务器用这个标识获取相应的会话信息。
	当你想跨页保存用户的偏好时,可以用会话。会话最常见的用法是提供用户验证信息,
	你 登录后就会创建一个会话。之后你就不用在每次重新加载页面时再登录一次。
	即便没有用 户账号,会话也有用。网站一般都要记住你喜欢如何排列东西,
	或者你喜欢哪种日期格 式,这些都不需要登录。

	